#!/bin/bash

# Author: Tomas M. <http://www.linux-live.org>
# Author: crims0n. <https://minios.dev>

read_config() {
    # Enable extended globbing. This is required for the pattern matching of variable names.
    shopt -s extglob

    # The first argument is the configuration file.
    local CONFIG_FILE="${1?No configuration file given}"

    # All other arguments are the variable names to look for.
    local KEYLIST="${@:2}"

    # Check if the configuration file exists and is readable.
    if [[ ! -f "${CONFIG_FILE}" ]]; then
        echo >&2 "\"${CONFIG_FILE}\" is not a file!"
        exit 1
    fi
    if [[ ! -r "${CONFIG_FILE}" ]]; then
        echo >&2 "\"${CONFIG_FILE}\" is not readable!"
        exit 1
    fi

    # Convert the list of variable names to a regex pattern.
    KEYLIST="${KEYLIST// /|}"

    # Read each line of the file.
    while IFS='= ' read -r LHS RHS; do
        # If the variable name is in our list and the value is not empty...
        if [[ "${LHS}" =~ ^(${KEYLIST})$ ]] && [[ -n ${RHS} ]]; then
            # Remove any quotes around the value.
            RHS="${RHS%\"*}"
            RHS="${RHS#\"*}"
            RHS="${RHS%\'*}"
            RHS="${RHS#\'*}"

            # If the value is an array (surrounded by parentheses)...
            if [[ "${RHS}" =~ ^\((.*)\)$ ]]; then
                # Assign the array to the variable.
                eval ${LHS}=\("${BASH_REMATCH[1]}"\)
            else
                # Otherwise, assign the value to the variable.
                eval ${LHS}=\"${RHS}\"
            fi
        fi
    done <<<"$(tr -d '\r' <${CONFIG_FILE})"

    # Disable extended globbing after we're done using it.
    shopt -u extglob
}

VERSION="1.1"
read_config /etc/minios/config LIVEKITNAME
read_config /etc/minios/config SYSTEMNAME
LIVEKITNAME=${LIVEKITNAME:-minios}
SYSTEMNAME=${SYSTEMNAME:-MiniOS}

TEMP=/tmp/"$LIVEKITNAME"iso.$$
MODULES=()

help() {
    echo "Usage: $(basename $0) [OPTIONS]... [MODULE.SB]..."
    echo "Generate MiniOS ISO image, adding specified modules."
    echo ""
    echo "Options:"
    echo "  -e, --exclude=REGEX   exclude any existing path or file matching REGEX"
    echo "  -f, --file=FILE       specify output ISO filename (default: $LIVEKITNAME-YYYYMMDD_HHMM.iso)"
    echo "      --help            display this help and exit"
    echo "      --version         display version information and exit"
    echo ""
    echo "Examples:"
    echo "  # create MiniOS ISO without chromium.sb module:"
    echo "  $(basename $0) -e 'chromium' -f minios_without_chromium.iso"
    echo "  # create MiniOS text-mode core only:"
    echo "  $(basename $0) --exclude='firmware|xorg|desktop|apps|chromium' --file=minios_textmode.iso"
    exit 0
}

brief_help() {
    echo "Usage: $(basename $0) [OPTIONS]... [MODULE.SB]..."
    echo "Try '$(basename $0) --help' for more information."
    exit 1
}

version() {
    echo "$(basename $0) $VERSION"
    exit 0
}

while [ "$#" -gt 0 ]; do
    case "$1" in
    -e | --exclude=*)
        if [[ "$1" == --* ]]; then
            REGEX="${1#*=}"
        else
            REGEX="$2"
            shift
        fi
        shift
        ;;
    -f | --file=*)
        if [[ "$1" == --* ]]; then
            TARGET="$(readlink -f "${1#*=}")"
        else
            TARGET="$(readlink -f "$2")"
            shift
        fi
        shift
        ;;
    --help)
        help
        ;;
    --version)
        version
        ;;
    *) # unknown option
        if [[ $1 == -* ]]; then
            brief_help
        elif [ -e "$1" ]; then
            MODULES+=("$(readlink -f "$1")")
            shift
        fi
        ;;
    esac
done

TARGET=${TARGET:-"$LIVEKITNAME-$(date +%Y%m%d_%H%M).iso"}

if [ -e "$SOURCE/data/$LIVEKITNAME/boot/isolinux.bin" ]; then
    MINIOS=$SOURCE/data/$LIVEKITNAME
elif [ -e "$SOURCE/iso/$LIVEKITNAME/boot/isolinux.bin" ]; then
    MINIOS=$SOURCE/iso/$LIVEKITNAME
elif [ -e "$SOURCE/toram/boot/isolinux.bin" ]; then
    MINIOS=$SOURCE/toram
elif [ -e "$SOURCE/data/from/0/$LIVEKITNAME/boot/isolinux.bin" ]; then
    MINIOS=$SOURCE/data/from/0/$LIVEKITNAME
fi

if [ "$MINIOS" = "" ]; then
    echo "Cannot find boot/isolinux.bin in MiniOS data" >&2
    exit 2
fi

echo $SYSTEMNAME >/tmp/info
cat <<EOF >/tmp/README
################################### README ####################################
* To install MiniOS, copy the contents of the ISO to the root of the media,
  then run minios\boot\bootinst.bat on Windows, or minios/boot/bootinst.sh
  on Linux.
* When installed on media with fat32 and ntfs file systems, changes in
  persistent changes mode will be saved in the minios\changes\changes.dat.x
  files, the files expands dynamically, the maximum size of each file is 4 GB.
* When installed on media with ext2-ext4, xfs, btrfs file systems, changes in
  the persistent changes mode will be saved in the minios\changes folder with
  no size limit.
###############################################################################
EOF

GRAFT=$(
    cd "$MINIOS"
    find . -type f | sed -r "s:^[.]/::" | egrep -v "^changes/" | egrep -v "$REGEX" | while read LINE; do
        echo "$LIVEKITNAME/$LINE=$MINIOS/$LINE"
    done
    cd "$MINIOS/boot/EFI"
    find . -type f | sed -r "s:^[.]/::" | egrep -v "$REGEX" | while read LINE; do
        echo "EFI/$LINE=$MINIOS/boot/EFI/$LINE"
    done
    echo ".disk/info=/tmp/info"
    echo "README=/tmp/README"
    echo "$LIVEKITNAME/$LIVEKITNAME.conf=/etc/$LIVEKITNAME/$LIVEKITNAME.conf"
    echo "$LIVEKITNAME/boot/grub/grub.cfg=/etc/$LIVEKITNAME/grub.cfg"
    echo "$LIVEKITNAME/boot/syslinux.cfg=/etc/$LIVEKITNAME/syslinux.cfg"
)

# add all modules
for MOD in "${MODULES[@]}"; do
    if [ ! -e "$MOD" ]; then
        echo "File does not exist: $MOD"
        exit 3
    fi
    BAS="$(basename "$MOD")"
    if [[ $BAS =~ ^[0-9]{2}- ]]; then
        GRAFT="$GRAFT $LIVEKITNAME/$BAS=$MOD"
    else
        GRAFT="$GRAFT $LIVEKITNAME/modules/$BAS=$MOD"
    fi
done

(
    mkdir -p $TEMP/$LIVEKITNAME/{boot,modules,changes,scripts}
    cp "$MINIOS/boot/isolinux.bin" "$TEMP/$LIVEKITNAME/boot"
    cp "$MINIOS/boot/isohdpfx.bin" "$TEMP/$LIVEKITNAME/boot"
    cd "$TEMP"
    xorriso -as mkisofs -isohybrid-mbr $MINIOS/boot/isohdpfx.bin \
        -no-emul-boot -boot-load-size 4 -boot-info-table \
        -eltorito-alt-boot -isohybrid-gpt-basdat -e $LIVEKITNAME/boot/grub/efi.img \
        -hide-rr-moved -o - -quiet -v -J -R -D -V "$SYSTEMNAME" -A "$SYSTEMNAME" -input-charset utf-8 \
        -b $LIVEKITNAME/boot/isolinux.bin -c $LIVEKITNAME/boot/isolinux.boot \
        -graft-points $GRAFT .
) >"$TARGET"

rm -Rf $TEMP
