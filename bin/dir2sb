#!/bin/bash
# Author: Tomas M. <http://www.slax.org/>
# Author: crims0n <https://minios.dev>

VERSION="1.2"
BEXT="sb"
COMP_TYPE="zstd"
export TEXTDOMAIN="minios-tools"

help() {
    echo "$(gettext "Usage"): $(basename $0) [OPTIONS]... SOURCE_DIRECTORY [TARGET_FILE]"
    echo "$(gettext "Converts a directory to a compressed .sb module")"
    echo ""
    echo "$(gettext "Options"):"
    echo "  -b, --bext EXT              $(gettext "Bundle extension. Default: sb")"
    echo "  -c, --comp TYPE             $(gettext "Compression type (zstd, gzip, lzo, xz). Default: zstd")"
    echo "      --help                  $(gettext "Display this help and exit")"
    echo "      --version               $(gettext "Display version information and exit")"
    echo ""
    echo "$(gettext "Arguments"):"
    echo "  SOURCE_DIRECTORY            $(gettext "The directory to convert to a module")"
    echo "  TARGET_FILE                 $(gettext "Optional. The name of the output module file")"
    echo ""
    echo "$(gettext "Behavior"):"
    echo "  * $(gettext "If SOURCE_DIRECTORY does not have a .sb extension and is not 'squashfs-root', then the directory itself is included in the module, and TARGET_FILE is required.")"
    echo "  * $(gettext "If TARGET_FILE is not specified, SOURCE_DIRECTORY is replaced by the new module file.")"
    exit 0
}

brief_help() {
    echo "$(gettext "Usage"): $(basename $0) [OPTIONS]... SOURCE_DIRECTORY [TARGET_FILE]"
    echo "$(gettext "Try") '$(basename $0) --help' $(gettext "for more information.")"
    exit 1
}

version() {
    echo "$(basename $0) $VERSION"
    exit 0
}

while [ $# -gt 0 ]; do
    case "$1" in
    -b | --bext)
        BEXT="$2"
        shift 2
        ;;
    -c | --comp)
        COMP_TYPE="$2"
        shift 2
        ;;
    --help)
        help
        ;;
    --version)
        version
        ;;
    *)
        if [ "$1" == -* ]; then # unknown option
            brief_help
        fi
        POSARGS+=("$1")
        shift
        ;;
    esac
done

if [ ${#POSARGS[@]} -eq 0 ]; then
    brief_help
elif [ ${#POSARGS[@]} -gt 2 ]; then
    brief_help
fi

P1="$(readlink -f "${POSARGS[0]}")"
P2=""
if [ ${#POSARGS[@]} -eq 2 ]; then
    P2="$(readlink -f "${POSARGS[1]}")"
fi

if [ "$P1" = "$P2" ]; then
    P2=""
fi

SB=$(echo "$P1" | grep -o "[.]${BEXT}/*\$")
if [ "$(echo "$P1" | grep -o "/squashfs-root/*\$")" != "" ]; then
    SB="true"
fi

if [ "$SB" = "" ]; then
    KEEP="-keep-as-directory"
    if [ "$P2" = "" ]; then
        brief_help
    fi
else
    KEEP=""
fi

if [ ! -d "$P1" ]; then
    echo "$(gettext "Error"): $(gettext "Not a directory:") $P1" >&2
    exit 2
fi

if [ "$COMP_TYPE" = "zstd" ]; then
    COMP_OPTS="-Xcompression-level 19"
elif [ "$COMP_TYPE" = "xz" ]; then
    COMP_OPTS="-Xbcj x86"
else
    COMP_OPTS=""
fi

mksquashfs "$TMP" "$TARGET" -comp "$COMP_TYPE" -b 1024K -always-use-fragments -noappend -quiet $COMP_OPTS

if [ "$P2" = "" ]; then
    TARGET="$P1.$BEXT"
    while [ -e "$TARGET" ]; do TARGET="$TARGET"x; done
    mksquashfs "$P1" "$TARGET" -comp "$COMP_TYPE" -b 1024K -always-use-fragments -quiet $COMP_OPTS "$KEEP" || echo "$(gettext "Error"): $(gettext "mksquashfs failed.")" >&2 && exit 3

    umount "$P1" 2>/dev/null
    rm -Rf "$P1"
    mv "$TARGET" "$P1"
else
    if [ -e "$P2" ]; then
        echo "$(gettext "Error"): $(gettext "Target exists:") $P2" >&2
        exit 4
    fi

    mksquashfs "$P1" "$P2" -comp "$COMP_TYPE" -b 1024K -always-use-fragments -quiet $COMP_OPTS "$KEEP" || echo "$(gettext "Error"): $(gettext "mksquashfs failed.")" >&2
fi
