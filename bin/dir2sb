#!/bin/bash
# Author: Tomas M. <http://www.slax.org/>
# Author: crims0n <https://minios.dev>

read_config() {
    # Enable extended globbing. This is required for the pattern matching of variable names.
    shopt -s extglob

    # The first argument is the configuration file.
    local CONFIG_FILE="${1?No configuration file given}"

    # All other arguments are the variable names to look for.
    local KEYLIST="${@:2}"

    # Check if the configuration file exists and is readable.
    if [[ ! -f "${CONFIG_FILE}" ]]; then
        echo >&2 "\"${CONFIG_FILE}\" is not a file!"
        exit 1
    fi
    if [[ ! -r "${CONFIG_FILE}" ]]; then
        echo >&2 "\"${CONFIG_FILE}\" is not readable!"
        exit 1
    fi

    # Convert the list of variable names to a regex pattern.
    KEYLIST="${KEYLIST// /|}"

    # Read each line of the file.
    while IFS='= ' read -r LHS RHS; do
        # If the variable name is in our list and the value is not empty...
        if [[ "${LHS}" =~ ^(${KEYLIST})$ ]] && [[ -n ${RHS} ]]; then
            # Remove any quotes around the value.
            RHS="${RHS%\"*}"
            RHS="${RHS#\"*}"
            RHS="${RHS%\'*}"
            RHS="${RHS#\'*}"

            # If the value is an array (surrounded by parentheses)...
            if [[ "${RHS}" =~ ^\((.*)\)$ ]]; then
                # Assign the array to the variable.
                eval ${LHS}=\("${BASH_REMATCH[1]}"\)
            else
                # Otherwise, assign the value to the variable.
                eval ${LHS}=\"${RHS}\"
            fi
        fi
    done <<<"$(tr -d '\r' <${CONFIG_FILE})"

    # Disable extended globbing after we're done using it.
    shopt -u extglob
}

read_config /etc/minios/config BEXT COMP_TYPE

usage() {
   echo ""
   echo "Convert directory to .sb compressed module"
   echo "Usage: $0 [source_directory.sb] [[target_file.sb]]"
   echo "  If source_directory does not have .sb suffix and it is not 'squashfs-root',"
   echo "  then the source_directory itself is included in the module and"
   echo "  then the target_file.sb parameter is required."
   echo "  If target_file.sb is not specified, the source_directory is erased"
   echo "  and replaced by the newly generated module file."
}

P1="$(readlink -f "$1")"
P2="$(readlink -f "$2")"

if [ "$P1" = "$P2" ]; then
   P2=""
fi

SB=$(echo "$P1" | grep -o "[.]sb/*\$")
if [ "$(echo "$P1" | grep -o "/squashfs-root/*\$")" != "" ]; then
   SB="true"
fi

if [ "$SB" = "" ]; then
   KEEP="-keep-as-directory"
   if [ "$P2" = "" ]; then
      usage
      exit 1
   fi
else
   KEEP=""
fi

if [ ! -d "$P1" ]; then
   echo "Not a directory: $P1" >&2
   exit 2
fi

if [ "$P2" = "" ]; then
   TARGET="$P1".$BEXT
   while [ -e "$TARGET" ]; do TARGET="$TARGET"x; done
   mksquashfs "$P1" "$TARGET" -comp $COMP_TYPE -b 1024K -always-use-fragments $KEEP >/dev/null || exit 3

   umount "$P1" 2>/dev/null
   rm -Rf "$P1"
   mv "$TARGET" "$P1"
else
   if [ -e "$P2" ]; then
      echo "Target exists: $P2" >&2
      exit 4
   fi

   mksquashfs "$P1" "$P2" -comp $COMP_TYPE -b 1024K -always-use-fragments $KEEP >/dev/null

fi
