#!/bin/bash
# Author: crims0n <https://minios.dev>

set -euo pipefail

# Set gettext environment variables
export TEXTDOMAIN="minios-tools"

########################################
# Global flags and variables
########################################
REPOSITORY_KERNEL=false
TEMPORARY_KERNEL_MODULES=false
# If true, prompt interactively for compression methods.
PROMPT_COMPRESSION=false
# Compression method options provided via command line (if any)
SQFS_COMP_OPTION=""
INITRD_COMP_OPTION=""

########################################
# Setup logging: standard log and trace log in /tmp.
########################################
LOG_FILE="/tmp/$(basename "$0")_$(date +'%Y%m%d_%H%M%S').log"
TRACE_LOG="/tmp/$(basename "$0")_trace_$(date +'%Y%m%d_%H%M%S').log"
: > "$LOG_FILE"
: > "$TRACE_LOG"

########################################
# Set up Bash execution tracing: send xtrace output to the trace log.
########################################
exec 5> "$TRACE_LOG"
export BASH_XTRACEFD=5
export PS4='+ $(date "+%Y-%m-%d %H:%M:%S") '
set -x

########################################
# Log a message to the log file with a timestamp.
########################################
log_message() {
    local msg="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $msg" >> "$LOG_FILE"
}

########################################
# Print help message and exit.
########################################
print_help_and_exit() {
    cat <<EOF
$(gettext "Creates a SquashFS image with kernel modules and an initramfs image.")
$(gettext "Usage:") $(basename "$0") [OPTIONS]

$(gettext "Options:")
  --help                        $(gettext "Show this help message and exit")
  -c, --choose-compression      $(gettext "Prompt interactively for compression methods.")
  -s, --squashfs-compression <method>
                                $(gettext "Specify SquashFS compression method (e.g., lz4, lzo, gzip, zstd, lzma, xz, bzip2).")
  -i, --initramfs-compression <method>
                                $(gettext "Specify initramfs compression method (e.g., lz4, lzo, gzip, zstd, lzma, xz, bzip2).")

$(gettext "If neither interactive mode (-c/--choose-compression) nor direct options (-s and -i)
are provided, the script defaults to \"zstd\" for both images.")
EOF
    exit 0
}

########################################
# Print a step message (to stderr) and log it.
########################################
print_step() {
    local message="$1"
    echo -e "\033[1;32m*  $message...\033[0m" >&2
    log_message "* $message..."
}

########################################
# Print an informational message (to stderr) and log it.
########################################
print_info() {
    local message="$1"
    echo -e "\033[1;34m   $message\033[0m" >&2
    log_message "INFO: $message"
}

########################################
# Print an error message (to stderr) and log it.
########################################
print_error() {
    local message="$1"
    echo -e "\033[1;31mE: $message\033[0m" >&2
    log_message "ERROR: $message"
}

########################################
# Update package lists only if /var/cache/apt/pkgcache.bin does not exist.
########################################
update_package_lists() {
    if [ ! -f /var/cache/apt/pkgcache.bin ]; then
        print_step "$(gettext "Updating package lists")"
        apt-get update -qq
    else
        print_info "$(gettext "Package lists cache exists; skipping apt-get update.")"
    fi
}

########################################
# Return a modules directory path that is not a symlink.
# Prefers /lib/modules if /lib is not a symlink; otherwise /usr/lib/modules.
# (Answer is sent to stdout.)
########################################
get_non_symlink_modules_dir() {
    if [ -d "/lib" ] && [ ! -L "/lib" ]; then
        echo "/lib/modules"
    elif [ -d "/usr/lib" ] && [ ! -L "/usr/lib" ]; then
        echo "/usr/lib/modules"
    else
        print_error "$(gettext "No valid modules directory found: both /lib and /usr/lib are symlinks or missing.")"
        exit 1
    fi
}

########################################
# Locate the kernel modules directory for an installed kernel.
########################################
locate_kernel_modules_directory() {
    local target_dir
    target_dir=$(get_non_symlink_modules_dir)
    if [ -d "$target_dir/$KERNEL" ]; then
        MOD_DIR="$target_dir"
    else
        print_error "$(gettext "Kernel modules directory for") $KERNEL $(gettext "not found in") $target_dir."
        exit 1
    fi
}

########################################
# Determine available compression methods and sort them by speed.
# Sorted array is returned via a nameref parameter.
########################################
get_sorted_compressions() {
    local -n sorted_comps=$1
    declare -A TOOLS=(
        [lz4]="lz4"
        [lzo]="lzop"
        [gzip]="gzip"
        [zstd]="zstd"
        [lzma]="lzma"
        [xz]="xz"
        [bzip2]="bzip2"
    )
    local available=()
    for comp in "${!TOOLS[@]}"; do
        if command -v "${TOOLS[$comp]}" &>/dev/null; then
            available+=("$comp")
        fi
    done
    local speed_order=("lz4" "lzo" "gzip" "zstd" "lzma" "xz" "bzip2")
    sorted_comps=()
    for method in "${speed_order[@]}"; do
        for avail in "${available[@]}"; do
            if [ "$method" = "$avail" ]; then
                sorted_comps+=("$avail")
            fi
        done
    done
}

########################################
# Prompt the user to choose the kernel source.
# (Return value is sent to stdout.)
########################################
choose_kernel_source() {
    local source
    source=$(whiptail --title "$(gettext "Kernel Source")" --menu "$(gettext "Choose kernel source:")" 15 60 2 \
        "local" "$(gettext "Use an installed kernel")" \
        "repository" "$(gettext "Download a kernel from the repository")" \
        3>&1 1>&2 2>&3)
    if [ -z "$source" ]; then
        print_error "$(gettext "Kernel source not selected.")"
        exit 1
    fi
    echo "$source"
}

########################################
# Prompt the user to select an installed kernel.
# (Return value is sent to stdout.)
########################################
choose_installed_kernel() {
    print_step "$(gettext "Scanning for installed kernels")"
    local kernels=()
    mapfile -t kernels < <(ls /lib/modules)
    if [ ${#kernels[@]} -eq 0 ]; then
        print_error "$(gettext "No installed kernels found in /lib/modules.")"
        exit 1
    fi
    print_info "$(gettext "Found kernels:") ${kernels[*]}"
    local options=()
    for k in "${kernels[@]}"; do
        options+=("$k" "")
    done
    local choice
    choice=$(whiptail --title "$(gettext "Installed Kernels")" --menu "$(gettext "Select a kernel:")" 15 60 6 "${options[@]}" 3>&1 1>&2 2>&3)
    if [ -z "$choice" ]; then
        print_error "$(gettext "No kernel selected.")"
        exit 1
    fi
    echo "$choice"
}

########################################
# List available repository kernel packages.
# (Return value is sent to stdout.)
########################################
list_repository_kernels() {
    local packages=()
    while IFS= read -r line; do
        local pkg
        pkg=$(echo "$line" | awk '{print $1}')
        if echo "$pkg" | grep -qE 'dbg|unsigned'; then
            continue
        fi
        packages+=("$pkg")
    done < <(apt-cache search '^linux-image-[0-9]' | sort -u)
    echo "${packages[@]}"
}

########################################
# Prompt the user to choose a repository kernel package.
# (Return value is sent to stdout.)
########################################
choose_repository_kernel_package() {
    { update_package_lists; } >/dev/null 2>&1
    local available=($(list_repository_kernels))
    if [ ${#available[@]} -eq 0 ]; then
        print_info "$(gettext "No repository kernels found, updating package lists again...")"
        { update_package_lists; } >/dev/null 2>&1
        available=($(list_repository_kernels))
        if [ ${#available[@]} -eq 0 ]; then
            print_error "$(gettext "No repository kernels found.")"
            exit 1
        fi
    fi
    local options=()
    for pkg in "${available[@]}"; do
        options+=("$pkg" "")
    done
    local choice
    choice=$(whiptail --title "$(gettext "Repository Kernels")" --menu "$(gettext "Select a kernel package:")" 20 78 12 "${options[@]}" 3>&1 1>&2 2>&3)
    if [ -z "$choice" ]; then
        print_error "$(gettext "No kernel package selected.")"
        exit 1
    fi
    echo "$choice"
}

########################################
# Download and extract a repository kernel package.
# (Return kernel version is sent to stdout.)
########################################
download_and_extract_repository_kernel() {
    local pkg="$1"
    print_step "$(gettext "Downloading package:") $pkg"
    apt-get download "$pkg"
    local deb_file
    deb_file=$(find . -maxdepth 1 -type f -name "${pkg}_*.deb" | head -n1)
    if [ -z "$deb_file" ]; then
        print_error "$(gettext "Failed to download package") $pkg."
        exit 1
    fi
    print_step "$(gettext "Extracting package")"
    dpkg-deb -x "$deb_file" "$TEMP_DIR"
    local version
    version=$(echo "$pkg" | sed 's/^linux-image-//')
    echo "$version"
}

########################################
# Choose the kernel (local or repository) and set the global KERNEL variable.
########################################
choose_kernel() {
    local source
    source=$(choose_kernel_source)
    if [ "$source" = "local" ]; then
        KERNEL=$(choose_installed_kernel)
        REPOSITORY_KERNEL=false
    else
        local repo_pkg
        repo_pkg=$(choose_repository_kernel_package)
        KERNEL=$(download_and_extract_repository_kernel "$repo_pkg")
        REPOSITORY_KERNEL=true
        print_info "$(gettext "Repository kernel prepared:") $KERNEL"
    fi
}

########################################
# Prompt for SquashFS compression method.
# Priority: if -s/--squashfs-compression is provided, use it;
# if interactive (-c/--choose-compression) is requested, show menu;
# otherwise default to "zstd".
########################################
choose_squashfs_compression_method() {
    if [ -n "$SQFS_COMP_OPTION" ]; then
        SQFS_COMP=$(echo "$SQFS_COMP_OPTION" | tr '[:upper:]' '[:lower:]')
        case "$SQFS_COMP" in
            lz4)    SQFS_COMP_PARAMS="-Xhc" ;;
            lzo)    SQFS_COMP_PARAMS="" ;;
            gzip)   SQFS_COMP_PARAMS="-Xcompression-level 9" ;;
            zstd)   SQFS_COMP_PARAMS="-Xcompression-level 19" ;;
            lzma)   SQFS_COMP_PARAMS="-Xdict-size 1M" ;;
            xz)     SQFS_COMP_PARAMS="-Xbcj x86" ;;
            bzip2)  SQFS_COMP_PARAMS="-Xblock-size 256K" ;;
            *)      SQFS_COMP_PARAMS="" ;;
        esac
        print_info "$(gettext "Using command-line SquashFS compression:") $SQFS_COMP $SQFS_COMP_PARAMS"
    elif [ "$PROMPT_COMPRESSION" = true ]; then
        print_step "$(gettext "Selecting SquashFS compression method")"
        local sorted=()
        get_sorted_compressions sorted
        local options=()
        for comp in "${sorted[@]}"; do
            case $comp in
                lz4)    options+=("lz4"    "$(gettext "Extreme speed, low compression ratio")") ;;
                lzo)    options+=("lzo"    "$(gettext "Very fast, low compression ratio")") ;;
                gzip)   options+=("gzip"   "$(gettext "Fast, moderate compression ratio")") ;;
                zstd)   options+=("zstd"   "$(gettext "Balanced speed and compression")") ;;
                lzma)   options+=("lzma"   "$(gettext "Slow, high compression ratio")") ;;
                xz)     options+=("xz"     "$(gettext "Slowest, highest compression ratio")") ;;
                bzip2)  options+=("bzip2"  "$(gettext "Very slow, slightly better than xz")") ;;
            esac
        done
        local choice
        choice=$(whiptail --title "$(gettext "SquashFS Compression")" --menu "$(gettext "Choose a compression method:")" 20 78 8 "${options[@]}" 3>&1 1>&2 2>&3)
        if [ -z "$choice" ]; then
            print_error "$(gettext "No SquashFS compression method selected.")"
            exit 1
        fi
        SQFS_COMP=$(echo "$choice" | tr '[:upper:]' '[:lower:]')
        case "$SQFS_COMP" in
            lz4)    SQFS_COMP_PARAMS="-Xhc" ;;
            lzo)    SQFS_COMP_PARAMS="" ;;
            gzip)   SQFS_COMP_PARAMS="-Xcompression-level 9" ;;
            zstd)   SQFS_COMP_PARAMS="-Xcompression-level 19" ;;
            lzma)   SQFS_COMP_PARAMS="-Xdict-size 1M" ;;
            xz)     SQFS_COMP_PARAMS="-Xbcj x86" ;;
            bzip2)  SQFS_COMP_PARAMS="-Xblock-size 256K" ;;
            *)      SQFS_COMP_PARAMS="" ;;
        esac
        print_info "$(gettext "Selected SquashFS:") $SQFS_COMP $SQFS_COMP_PARAMS"
    else
        SQFS_COMP="zstd"
        SQFS_COMP_PARAMS="-Xcompression-level 19"
        print_info "$(gettext "Using default SquashFS compression:") $SQFS_COMP $SQFS_COMP_PARAMS"
    fi
}

########################################
# Prompt for initramfs compression method.
# Priority: if -i/--initramfs-compression is provided, use it;
# if interactive (-c/--choose-compression) is requested, show menu;
# otherwise default to "zstd".
########################################
choose_initrd_compression_method() {
    if [ -n "$INITRD_COMP_OPTION" ]; then
        INITRD_COMP=$(echo "$INITRD_COMP_OPTION" | tr '[:upper:]' '[:lower:]')
        print_info "$(gettext "Using command-line initramfs compression:") $INITRD_COMP"
    elif [ "$PROMPT_COMPRESSION" = true ]; then
        print_step "$(gettext "Selecting initramfs compression method")"
        local sorted=()
        get_sorted_compressions sorted
        local options=()
        for comp in "${sorted[@]}"; do
            case $comp in
                lz4)    options+=("lz4"    "$(gettext "Extreme speed, low compression ratio")") ;;
                lzo)    options+=("lzo"    "$(gettext "Very fast, low compression ratio")") ;;
                gzip)   options+=("gzip"   "$(gettext "Fast, moderate compression ratio")") ;;
                zstd)   options+=("zstd"   "$(gettext "Balanced speed and compression")") ;;
                lzma)   options+=("lzma"   "$(gettext "Slow, high compression ratio")") ;;
                xz)     options+=("xz"     "$(gettext "Slowest, highest compression ratio")") ;;
                bzip2)  options+=("bzip2"  "$(gettext "Very slow, slightly better than xz")") ;;
            esac
        done
        local choice
        choice=$(whiptail --title "$(gettext "Initramfs Compression")" --menu "$(gettext "Choose a compression method:")" 20 78 8 "${options[@]}" 3>&1 1>&2 2>&3)
        if [ -z "$choice" ]; then
            print_error "$(gettext "No initramfs compression method selected.")"
            exit 1
        fi
        INITRD_COMP=$(echo "$choice" | tr '[:upper:]' '[:lower:]')
        print_info "$(gettext "Selected initramfs compression:") $INITRD_COMP"
    else
        INITRD_COMP="zstd"
        print_info "$(gettext "Using default initramfs compression:") $INITRD_COMP"
    fi
}

########################################
# Locate and copy the vmlinuz file for the selected kernel.
########################################
copy_kernel_vmlinuz() {
    print_step "$(gettext "Locating vmlinuz for kernel") $KERNEL"
    local paths=(
        "$TEMP_DIR/boot/vmlinuz-$KERNEL"
        "/boot/vmlinuz-$KERNEL"
        "/run/initramfs/memory/data/minios/boot/vmlinuz-$KERNEL"
        "/run/initramfs/memory/data/minios/boot/vmlinuz"
        "/run/initramfs/memory/toram/minios/boot/vmlinuz-$KERNEL"
        "/run/initramfs/memory/toram/minios/boot/vmlinuz"
    )
    for path in "${paths[@]}"; do
        if [ -f "$path" ]; then
            VMLINUZ_PATH="$path"
            break
        fi
    done
    if [ -z "${VMLINUZ_PATH:-}" ] || [ ! -f "$VMLINUZ_PATH" ]; then
        print_error "$(gettext "vmlinuz for kernel") $KERNEL $(gettext "not found.")"
        exit 1
    fi
    cp "$VMLINUZ_PATH" "$CURRENT_DIR/vmlinuz-$KERNEL"
    print_info "$(gettext "vmlinuz copied as") vmlinuz-$KERNEL"
}

########################################
# Prepare temporary kernel modules for a repository kernel.
# (Uses a non-symlink modules directory.)
########################################
prepare_temporary_kernel_modules() {
    print_step "$(gettext "Preparing temporary kernel modules for") $KERNEL"
    local target_dir
    target_dir=$(get_non_symlink_modules_dir)
    if [ -d "$target_dir/$KERNEL" ]; then
        print_error "$(gettext "Kernel") $KERNEL $(gettext "is already installed in the system. Please select one of the installed kernels.")"
        exit 1
    fi
    local extracted_path=""
    if [ -d "$TEMP_DIR/lib/modules/$KERNEL" ]; then
        extracted_path="$TEMP_DIR/lib/modules/$KERNEL"
    elif [ -d "$TEMP_DIR/usr/lib/modules/$KERNEL" ]; then
        extracted_path="$TEMP_DIR/usr/lib/modules/$KERNEL"
    else
        print_error "$(gettext "Extracted kernel modules for") $KERNEL $(gettext "not found in the package.")"
        exit 1
    fi
    print_step "$(gettext "Copying kernel modules for") $KERNEL $(gettext "to") $target_dir"
    cp -r "$extracted_path" "$target_dir/"
    if [ $? -ne 0 ]; then
        print_error "$(gettext "Failed to copy kernel modules to") $target_dir."
        exit 1
    fi
    TEMPORARY_KERNEL_MODULES=true
    if [ ! -f "$target_dir/$KERNEL/modules.dep" ]; then
        print_step "$(gettext "Running depmod for kernel") $KERNEL"
        depmod "$KERNEL"
    fi
    MOD_DIR="$target_dir"
}

########################################
# Create a SquashFS image of the kernel modules.
########################################
build_kernel_modules_squashfs_image() {
    print_step "$(gettext "Building SquashFS image for kernel modules")"
    local output_image="$CURRENT_DIR/01-kernel-$KERNEL.sb"
    [ -f "$output_image" ] && rm "$output_image"
    local sqfs_version
    sqfs_version=$(mksquashfs -version 2>&1 | head -n1 | grep -oP '\d+\.\d+')
    local major=${sqfs_version%%.*}
    local minor=${sqfs_version#*.}
    if (( major > 4 || (major == 4 && minor >= 5) )); then
        mksquashfs "$MOD_DIR/$KERNEL" "$output_image" \
            -comp "$SQFS_COMP" $SQFS_COMP_PARAMS -b 1024K \
            -always-use-fragments -noappend -quiet -progress -no-strip
    else
        mksquashfs "$MOD_DIR/$KERNEL" "$output_image" \
            -comp "$SQFS_COMP" $SQFS_COMP_PARAMS -b 1024K \
            -always-use-fragments -noappend -quiet -progress
    fi
    print_info "$(gettext "SquashFS image created:") $output_image"
}

########################################
# Create the initramfs image.
########################################
generate_initramfs_image() {
    print_step "$(gettext "Generating initramfs image")"
    set -x
    local initramfs_path
    initramfs_path=$(/run/initramfs/mkinitrfs "$KERNEL" "$INITRD_COMP" "$MOD_DIR")
    set +x
    if [ $? -ne 0 ] || [ -z "$initramfs_path" ]; then
        print_error "$(gettext "Failed to generate initramfs image.")"
        exit 1
    fi
    cp "$initramfs_path" "$CURRENT_DIR/initrfs-$KERNEL.img"
    print_info "$(gettext "initramfs image created:") initrfs-$KERNEL.img"
}

########################################
# Print instructions for deploying the generated files.
########################################
print_usage_instructions() {
    cat <<EOF

============================================================
$(gettext "Usage Instructions for the Generated Files:")
============================================================

1. $(gettext "Copy the SquashFS image:")
   - $(gettext "File:") 01-kernel-${KERNEL}.sb
   - $(gettext "Destination: Place this file into the /minios folder on your USB flash drive.")

2. $(gettext "Copy the kernel and initramfs images:")
   - $(gettext "Files:") vmlinuz-${KERNEL} and initrfs-${KERNEL}.img
   - $(gettext "Destination: Place these files into the /minios/boot folder on your USB flash drive.")

3. $(gettext "Update Bootloader Configuration:")
   - $(gettext "Edit the file") /minios/boot/syslinux.cfg $(gettext "and update the entries for the kernel and initrd.")
   - $(gettext "Similarly, edit") /minios/boot/grub/grub.cfg $(gettext "to reference the new kernel (vmlinuz-${KERNEL}) and initramfs (initrfs-${KERNEL}.img).")

4. $(gettext "Save your changes and safely eject the flash drive. Your flash drive is now ready to boot the new system.")

EOF
}

########################################
# Cleanup temporary files and remove temporary kernel modules if applicable.
########################################
cleanup_temp_files() {
    print_step "$(gettext "Cleaning up temporary files")"
    if [ -n "${TEMP_DIR:-}" ] && [ -d "$TEMP_DIR" ]; then
        if [ -f "$TEMP_DIR/livekit/initramfs.log" ]; then
            cp "$TEMP_DIR/livekit/initramfs.log" "$CURRENT_DIR/initramfs-$KERNEL.log"
        fi
        rm -rf "$TEMP_DIR"
    fi
    if [ "${TEMPORARY_KERNEL_MODULES:-false}" = true ] && [ -n "${MOD_DIR:-}" ]; then
        print_step "$(gettext "Removing temporary kernel modules for") $KERNEL $(gettext "from") $MOD_DIR"
        rm -rf "$MOD_DIR/$KERNEL"
    fi
    print_info "$(gettext "Cleanup complete.")"
}

########################################
# Main function: sequential execution of tasks.
########################################
main() {
    # Process command-line options.
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --help) print_help_and_exit ;;
            -c|--choose-compression)
                PROMPT_COMPRESSION=true; shift ;;
            -s|--squashfs-compression)
                SQFS_COMP_OPTION="$2"; shift 2 ;;
            -i|--initramfs-compression)
                INITRD_COMP_OPTION="$2"; shift 2 ;;
            *) break ;;
        esac
    done

    if [[ "$EUID" -ne 0 ]]; then
        print_error "$(gettext "This script must be run as root.")"
        exit 1
    fi

    TEMP_DIR=$(mktemp -d)
    CURRENT_DIR="$PWD"

    # Set trap for cleanup.
    trap cleanup_temp_files EXIT

    choose_kernel
    choose_squashfs_compression_method
    choose_initrd_compression_method
    copy_kernel_vmlinuz

    if [ "$REPOSITORY_KERNEL" = true ]; then
        prepare_temporary_kernel_modules
    else
        locate_kernel_modules_directory
    fi

    build_kernel_modules_squashfs_image
    generate_initramfs_image

    # Print usage instructions for deployment.
    print_usage_instructions
}

main "$@"
